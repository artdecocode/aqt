{"version":3,"sources":["../src/index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import { request as https } from 'https'\nimport { request as http } from 'http'\nimport { debuglog } from 'util'\nimport erotic from 'erotic'\nimport { parse } from 'url'\nimport { version } from '../package.json'\nimport { getData, exec } from './lib'\n\nconst LOG = debuglog('aqt')\n\n/**\n * Request a web page and return information including `headers`, `statusCode`, `statusMessage` along with the `body` (which is also parsed if JSON received).\n * @param {string} address The URL such as http://example.com/api.\n * @param {Config} [config] Configuration for requests.\n * @param {Object} config.data Optional data to send to the server with the request.\n * @param {'form'|'json'} [config.type=\"'json'\"] How to send data: `json` to serialise JSON data and `form` for url-encoded transmission with `json` mode by default. Default `'json'`.\n * @param {OutgoingHttpHeaders} [config.headers] Headers to use for the request.\n * @param {boolean} [config.compress=true] Add the `Accept-Encoding: gzip, deflate` header automatically to indicate to the server that it can send a compressed response. Default `true`.\n * @param {string} [config.headers=\"POST\"] What HTTP method to use to send data. Default `POST`.\n * @param {boolean} [config.binary=false] Whether to return a buffer instead of a string. Default `false`.\n * @param {boolean} [config.justHeaders=false] Whether to stop the request after response headers were received, without waiting for the data. Default `false`.\n */\nconst aqt = async (address, config = {}) => {\n  const {\n    data: d,\n    type = 'json',\n    headers: outgoingHeaders = {\n      'User-Agent': `Mozilla/5.0 (Node.js) aqt/${version}`,\n    },\n    compress = true,\n    binary = false,\n    method = 'POST',\n    justHeaders = false,\n  } = config\n  const er = erotic(true)\n\n  const { hostname, protocol, port, path } = parse(address)\n  const isHttps = protocol === 'https:'\n  const request = isHttps ? https : http\n\n  const options = {\n    hostname,\n    port,\n    path,\n    headers: {\n      ...outgoingHeaders,\n    },\n  }\n\n  let data\n  if (d) {\n    const _d = getData(type, d)\n      ; ({ data } = _d)\n    const { contentType } = _d\n\n    options.method = method\n    options.headers['Content-Type'] = contentType\n    options.headers['Content-Length'] = Buffer.byteLength(data)\n  }\n  if (compress) {\n    options.headers['Accept-Encoding'] = 'gzip, deflate'\n  }\n\n  const {\n    body, headers, byteLength, statusCode, statusMessage, rawLength,\n    parsedBody,\n  } = await exec(request, options, {\n    data,\n    justHeaders,\n    binary,\n    er,\n  })\n\n  LOG('%s %s B%s', address, byteLength, `${byteLength != rawLength ? ` (raw ${rawLength} B)` : ''}`)\n\n  return {\n    body: parsedBody ? parsedBody : body,\n    headers,\n    statusCode,\n    statusMessage,\n  }\n}\n\nexport default aqt\n\n/* documentary types/index.xml */\n/**\n * @typedef {import('http').OutgoingHttpHeaders} OutgoingHttpHeaders\n *\n * @typedef {Object} Config Configuration for requests.\n * @prop {Object} data Optional data to send to the server with the request.\n * @prop {'form'|'json'} [type=\"'json'\"] How to send data: `json` to serialise JSON data and `form` for url-encoded transmission with `json` mode by default. Default `'json'`.\n * @prop {OutgoingHttpHeaders} [headers] Headers to use for the request.\n * @prop {boolean} [compress=true] Add the `Accept-Encoding: gzip, deflate` header automatically to indicate to the server that it can send a compressed response. Default `true`.\n * @prop {string} [headers=\"POST\"] What HTTP method to use to send data. Default `POST`.\n * @prop {boolean} [binary=false] Whether to return a buffer instead of a string. Default `false`.\n * @prop {boolean} [justHeaders=false] Whether to stop the request after response headers were received, without waiting for the data. Default `false`.\n */\n"]}