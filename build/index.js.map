{"version":3,"sources":["../src/index.js"],"names":["LOG","aqt","address","config","data","d","type","headers","outgoingHeaders","version","binary","method","justHeaders","er","hostname","protocol","port","path","isHttps","request","https","http","options","_d","contentType","Buffer","byteLength","body","statusCode","statusMessage","rawLength","parsedBody"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEA,MAAMA,MAAM,oBAAS,KAAT,CAAZ;AAEA;;;;;;;;;;;;AAWO,MAAMC,MAAM,OAAOC,OAAP,EAAgBC,SAAS,EAAzB,KAAgC;AACjD,QAAM;AACJC,UAAMC,CADF;AAEJC,WAAO,MAFH;AAGJC,aAASC,kBAAkB;AACzB,oBAAe,6BAA4BC,gBAAQ;AAD1B,KAHvB;AAMJC,aAAS,KANL;AAOJC,aAAS,MAPL;AAQJC,kBAAc;AARV,MASFT,MATJ;AAUA,QAAMU,KAAK,qBAAO,IAAP,CAAX;AAEA,QAAM;AAAEC,YAAF;AAAYC,YAAZ;AAAsBC,QAAtB;AAA4BC;AAA5B,MAAqC,gBAAMf,OAAN,CAA3C;AACA,QAAMgB,UAAUH,aAAa,QAA7B;AACA,QAAMI,UAAUD,UAAUE,cAAV,GAAkBC,aAAlC;AAEA,QAAMC,UAAU;AACdR,YADc;AAEdE,QAFc;AAGdC,QAHc;AAIdV,aAASC;AAJK,GAAhB;AAOA,MAAIJ,IAAJ;;AACA,MAAIC,CAAJ,EAAO;AACL,UAAMkB,KAAK,kBAAQjB,IAAR,EAAcD,CAAd,CAAX;;AACI,KAAC;AAAED;AAAF,QAAWmB,EAAZ;AACJ,UAAM;AAAEC;AAAF,QAAkBD,EAAxB;AAEAD,YAAQX,MAAR,GAAiBA,MAAjB;AACAW,YAAQf,OAAR,CAAgB,cAAhB,IAAkCiB,WAAlC;AACAF,YAAQf,OAAR,CAAgB,gBAAhB,IAAoCkB,OAAOC,UAAP,CAAkBtB,IAAlB,CAApC;AACD;;AAED,QAAM;AAAEuB,QAAF;AAAQpB,WAAR;AAAiBmB,cAAjB;AAA6BE,cAA7B;AAAyCC,iBAAzC;AAAwDC,aAAxD;AAAmEC;AAAnE,MAAkF,MAAM,eAAKZ,OAAL,EAAcG,OAAd,EAAuB;AACnHlB,QADmH;AAEnHQ,eAFmH;AAGnHF,UAHmH;AAInHG;AAJmH,GAAvB,CAA9F;AAOAb,MAAI,WAAJ,EAAiBE,OAAjB,EAA0BwB,UAA1B,EAAuC,GAAEA,cAAcI,SAAd,GAA2B,SAAQA,SAAU,KAA7C,GAAoD,EAAG,EAAhG;AAEA,SAAO;AACLH,UAAMI,aAAaA,UAAb,GAA0BJ,IAD3B;AAELpB,WAFK;AAGLqB,cAHK;AAILC;AAJK,GAAP;AAMD,CAlDM;;;eAoDQ5B,G;AAEf","sourcesContent":["import { request as https } from 'https'\nimport { request as http  } from 'http'\nimport { debuglog } from 'util'\nimport erotic from 'erotic'\nimport { parse } from 'url'\nimport { version } from '../package.json'\nimport { getData, exec } from './lib'\n\nconst LOG = debuglog('aqt')\n\n/**\n * Advanced Request - request a web page and return information including `headers`, `statusCode`, `statusMessage` along with the `body` (which is also parsed if JSON received).\n * @param {string} address Url such as http://example.com/api\n * @param {Aconfig} [config] Configuration object\n * @param {object} [config.data] Data to send to the server with the request.\n * @param {object} [config.headers] Headers to use in the request.\n * @param {boolean} [config.binary=false] Whether to return a buffer instead of a string (default false).\n * @param {'form'|'json'} [config.type='json'] How to send data: `json` to serialise JSON data and `form` for url-encoded transmission with `json` mode by default.\n * @param {string} [config.method='POST'] What method to use to send data (only works when `data` is set). Default `POST`.\n * @param {boolean} [config.justHeaders=false] Whether to stop the request after response headers were received, without waiting for the data. Default `false`.\n */\nexport const aqt = async (address, config = {}) => {\n  const {\n    data: d,\n    type = 'json',\n    headers: outgoingHeaders = {\n      'User-Agent': `Mozilla/5.0 (Node.js) aqt/${version}`,\n    },\n    binary = false,\n    method = 'POST',\n    justHeaders = false,\n  } = config\n  const er = erotic(true)\n\n  const { hostname, protocol, port, path } = parse(address)\n  const isHttps = protocol === 'https:'\n  const request = isHttps ? https : http\n\n  const options = {\n    hostname,\n    port,\n    path,\n    headers: outgoingHeaders,\n  }\n\n  let data\n  if (d) {\n    const _d = getData(type, d)\n      ; ({ data } = _d)\n    const { contentType } = _d\n\n    options.method = method\n    options.headers['Content-Type'] = contentType\n    options.headers['Content-Length'] = Buffer.byteLength(data)\n  }\n\n  const { body, headers, byteLength, statusCode, statusMessage, rawLength, parsedBody } = await exec(request, options, {\n    data,\n    justHeaders,\n    binary,\n    er,\n  })\n\n  LOG('%s %s B%s', address, byteLength, `${byteLength != rawLength ? ` (raw ${rawLength} B)` : ''}`)\n\n  return {\n    body: parsedBody ? parsedBody : body,\n    headers,\n    statusCode,\n    statusMessage,\n  }\n}\n\nexport default aqt\n\n/**\n * @typedef {Object} Aconfig\n * @property {object} [data] Optional data to send to the server with the request.\n * @property {'form'|'json'} [type='json'] How to send data: `json` to serialise JSON data and `form` for url-encoded transmission with `json` mode by default.\n * @property {object} [headers] Headers to use for the request.\n * @property {boolean} [binary] Whether to return a buffer instead of a string (default false).\n * @property {string} [method='POST'] What HTTP method to use to send data (only works when `data` is set). Default `POST`.\n * @property {boolean} [justHeaders=false] Whether to stop the request after response headers were received, without waiting for the data. Default `false`.\n */\n"],"file":"index.js"}