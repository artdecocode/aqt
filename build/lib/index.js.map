{"version":3,"sources":["../../src/lib/index.js"],"names":["getFormData","form","urlEncodedDataPairs","Object","keys","reduce","acc","key","v","p","encodeURIComponent","d","join","replace","getData","type","data","JSON","stringify","contentType","exec","request","requestOptions","justHeaders","binary","er","req","promise","write","end","res","isJson","isHeadersJson","headers","parsedBody","parse","body","e","err","response","startsWith","isMessageGzip"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEO,MAAMA,cAAc,CAACC,OAAO,EAAR,KAAe;AACxC,QAAMC,sBAAsBC,OAAOC,IAAP,CAAYH,IAAZ,EAAkBI,MAAlB,CAAyB,CAACC,GAAD,EAAMC,GAAN,KAAc;AACjE,UAAMC,IAAIP,KAAKM,GAAL,CAAV;AACA,UAAME,IAAK,GAAEC,mBAAmBH,GAAnB,CAAwB,IAAGG,mBAAmBF,CAAnB,CAAsB,EAA9D;AACA,WAAO,CAAC,GAAGF,GAAJ,EAASG,CAAT,CAAP;AACD,GAJ2B,EAIzB,EAJyB,CAA5B;AAMA,QAAME,IAAIT,oBAAoBU,IAApB,CAAyB,GAAzB,EAA8BC,OAA9B,CAAsC,MAAtC,EAA8C,GAA9C,CAAV;AACA,SAAOF,CAAP;AACD,CATM;;;;AAWA,MAAMG,UAAU,CAACC,IAAD,EAAOC,IAAP,KAAgB;AACrC,UAAQD,IAAR;AACA,SAAK,MAAL;AACEC,aAAOC,KAAKC,SAAL,CAAeF,IAAf,CAAP;AACAD,aAAO,kBAAP;AACA;;AACF,SAAK,MAAL;AACEC,aAAOhB,YAAYgB,IAAZ,CAAP;AACAD,aAAO,mCAAP;AACA;AARF;;AAUA,SAAO;AACLC,QADK;AAELG,iBAAaJ;AAFR,GAAP;AAID,CAfM;;;;AAiBA,MAAMK,OAAO,OAAOC,OAAP,EAAgBC,cAAhB,EAAgC;AAAEN,MAAF;AAAQO,aAAR;AAAqBC,QAArB;AAA6BC,OAAK,qBAAO,IAAP;AAAlC,CAAhC,KAAqF;AACvG,QAAM;AAAEC,OAAF;AAAOC;AAAP,MAAmB,8BAAYN,OAAZ,EAAqBC,cAArB,EAAqC;AAC5DC,eAD4D;AAE5DC,UAF4D;AAG5DC;AAH4D,GAArC,CAAzB;;AAKA,MAAIT,IAAJ,EAAU;AACRU,QAAIE,KAAJ,CAAUZ,IAAV,EAAgB,MAAM;AACpBU,UAAIG,GAAJ;AACD,KAFD;AAGD,GAJD,MAIO;AACLH,QAAIG,GAAJ;AACD;;AACD,QAAMC,MAAM,MAAMH,OAAlB;AAEA,QAAMI,SAASC,cAAcF,IAAIG,OAAlB,CAAf;;AAEA,MAAIF,MAAJ,EAAY;AACV,QAAI;AACFD,UAAII,UAAJ,GAAiBjB,KAAKkB,KAAL,CAAWL,IAAIM,IAAf,CAAjB;AACD,KAFD,CAEE,OAAOC,CAAP,EAAU;AACV,YAAMC,MAAMb,GAAGY,CAAH,CAAZ;AACAC,UAAIC,QAAJ,GAAeT,IAAIM,IAAnB;AACA,YAAME,GAAN;AACD;AACF;;AAED,SAAOR,GAAP;AACD,CA5BM;AA8BP;;;;;;;AAGA,MAAME,gBAAiBC,OAAD,IAAa;AACjC,SAAOA,QAAQ,cAAR,EAAwBO,UAAxB,CAAmC,kBAAnC,CAAP;AACD,CAFD;AAIA;;;;;AAGO,MAAMC,gBAAiBX,GAAD,IAAS;AACpC,SAAOA,IAAIG,OAAJ,CAAY,kBAAZ,KAAmC,MAA1C;AACD,CAFM","sourcesContent":["import erotic from 'erotic'\nimport { makeRequest } from './make-request'\n\nexport const getFormData = (form = {}) => {\n  const urlEncodedDataPairs = Object.keys(form).reduce((acc, key) => {\n    const v = form[key]\n    const p = `${encodeURIComponent(key)}=${encodeURIComponent(v)}`\n    return [...acc, p]\n  }, [])\n\n  const d = urlEncodedDataPairs.join('&').replace(/%20/g, '+')\n  return d\n}\n\nexport const getData = (type, data) => {\n  switch (type) {\n  case 'json':\n    data = JSON.stringify(data)\n    type = 'application/json'\n    break\n  case 'form':\n    data = getFormData(data)\n    type = 'application/x-www-form-urlencoded'\n    break\n  }\n  return {\n    data,\n    contentType: type,\n  }\n}\n\nexport const exec = async (request, requestOptions, { data, justHeaders, binary, er = erotic(true) }) => {\n  const { req, promise } = makeRequest(request, requestOptions, {\n    justHeaders,\n    binary,\n    er,\n  })\n  if (data) {\n    req.write(data, () => {\n      req.end()\n    })\n  } else {\n    req.end()\n  }\n  const res = await promise\n\n  const isJson = isHeadersJson(res.headers)\n\n  if (isJson) {\n    try {\n      res.parsedBody = JSON.parse(res.body)\n    } catch (e) {\n      const err = er(e)\n      err.response = res.body\n      throw err\n    }\n  }\n\n  return res\n}\n\n/**\n * @param {IncomingMessage.headers} headers\n */\nconst isHeadersJson = (headers) => {\n  return headers['content-type'].startsWith('application/json')\n}\n\n/**\n * @param {IncomingMessage} req\n */\nexport const isMessageGzip = (res) => {\n  return res.headers['content-encoding'] == 'gzip'\n}\n"],"file":"index.js"}