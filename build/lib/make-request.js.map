{"version":3,"sources":["../../src/lib/make-request.js"],"names":["makeRequest","request","requestOptions","config","justHeaders","binary","er","req","h","m","b","rl","bl","promise","Promise","r","j","res","headers","statusMessage","statusCode","destroy","isGzip","on","data","byteLength","rs","pipe","p","Catchment","body","length","error","err","then","rawLength","parsedBody"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;AAD2C;;AAG3C;;;;;;;;AAQO,MAAMA,cAAc,CAACC,OAAD,EAAUC,cAAV,EAA0BC,MAA1B,KAAqC;AAC9D,QAAM;AAAEC,eAAF;AAAeC,UAAf;AAAuBC,SAAK,qBAAO,IAAP;AAA5B,MAA6CH,MAAnD;AACA,MAAII,GAAJ;AAEA;;AACA,MAAIC,CAAJ;AACA;;AACA,MAAIC,CAAJ;AACA;;AACA,MAAIC,CAAJ;AACA;;AACA,MAAIC,KAAK,CAAT;AACA;;AACA,MAAIC,KAAK,CAAT;AAEA,QAAMC,UAAU,IAAIC,OAAJ,CAAY,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACpCT,UAAMN,QAAQC,cAAR,EAAwB,MAAOe,GAAP,IAAe;AAC3C,YAAM;AAAEC,eAAF;AAAWC,qBAAX;AAA0BC;AAA1B,UAAyCH,GAA/C;AACAT,UAAIU,OAAJ;AACAT,UAAI;AAAEU,qBAAF;AAAiBC;AAAjB,OAAJ;;AACA,UAAIhB,WAAJ,EAAiB;AACfa,YAAII,OAAJ;AACAN;AACA;AACD;;AACD,YAAMO,SAAS,qBAAcL,GAAd,CAAf;AAEAA,UAAIM,EAAJ,CAAO,MAAP,EAAeC,QAAQb,MAAMa,KAAKC,UAAlC;AAEA,YAAMC,KAAKJ,SACPL,IAAIU,IAAJ,CAAS,yBAAT,CADO,GAEPV,GAFJ;AAKA,YAAM;AAAEJ,iBAASe;AAAX,UAAiB,IAAIC,kBAAJ,CAAc;AAAEH,UAAF;AAAMrB;AAAN,OAAd,CAAvB;AACA,UAAIyB,OAAO,MAAMF,CAAjB;AAEAlB,UAAIoB,IAAJ;AACAlB,WAAKkB,KAAKC,MAAV;AAEAhB;AACD,KAzBK,EA0BHQ,EA1BG,CA0BA,OA1BA,EA0BUS,KAAD,IAAW;AACtB,YAAMC,MAAM3B,GAAG0B,KAAH,CAAZ;AACAhB,QAAEiB,GAAF;AACD,KA7BG,CAAN;AA8BD,GA/Be,EA+BbC,IA/Ba,CA+BR,MAAM;AACZ,UAAMnB,IAAI;AACRe,YAAMpB,CADE;AAERQ,eAASV,CAFD;AAGR,SAAGC,CAHK;AAIR0B,iBAAWxB,EAJH;AAKRc,kBAAYb,EALJ;AAMRwB,kBAAY;AANJ,KAAV;AAQA,WAAOrB,CAAP;AACD,GAzCe,CAAhB;AA0CA,SAAO;AAAER,OAAF;AAAOM;AAAP,GAAP;AACD,CA1DM","sourcesContent":["import erotic from 'erotic'\nimport Catchment from 'catchment'\nimport { createGunzip } from 'zlib'\nimport { IncomingHttpHeaders } from 'http' // eslint-disable-line\nimport { isMessageGzip } from '.'\n\n/**\n * @param {http} request actual http or https request function\n * @param {RequestOptions} requestOptions\n * @param {object} config Config object.\n * @param {boolean} [config.justHeaders] only return headers as soon as available. false\n * @param {boolean} [config.binary] return binary\n * @param {boolean} [config.er] erotic callback\n */\nexport const makeRequest = (request, requestOptions, config) => {\n  const { justHeaders, binary, er = erotic(true) } = config\n  let req\n\n  /** @type {IncomingHttpHeaders} */\n  let h\n  /** @type {{statusMessage: string, statusCode: number}} */\n  let m\n  /** @type {string|Buffer} */\n  let b\n  /** @type {number} */\n  let rl = 0\n  /** @type {number} */\n  let bl = 0\n\n  const promise = new Promise((r, j) => {\n    req = request(requestOptions, async (res) => {\n      const { headers, statusMessage, statusCode } = res\n      h = headers\n      m = { statusMessage, statusCode }\n      if (justHeaders) {\n        res.destroy()\n        r()\n        return\n      }\n      const isGzip = isMessageGzip(res)\n\n      res.on('data', data => rl += data.byteLength )\n\n      const rs = isGzip\n        ? res.pipe(createGunzip())\n        : res\n\n\n      const { promise: p } = new Catchment({ rs, binary })\n      let body = await p\n\n      b = body\n      bl = body.length\n\n      r()\n    })\n      .on('error', (error) => {\n        const err = er(error)\n        j(err)\n      })\n  }).then(() => {\n    const r = {\n      body: b,\n      headers: h,\n      ...m,\n      rawLength: rl,\n      byteLength: bl,\n      parsedBody: null,\n    }\n    return r\n  })\n  return { req, promise }\n}\n"],"file":"make-request.js"}