{"version":3,"sources":["../../src/lib/make-request.js"],"names":[],"mappings":"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","file":"lib/make-request.js","sourcesContent":["import erotic from 'erotic'\nimport Catchment from 'catchment'\nimport { createGunzip } from 'zlib'\n\n/**\n * @param {import('http').IncomingMessage} req\n */\nexport const isMessageGzip = (res) => {\n  return res.headers['content-encoding'] == 'gzip'\n}\n\n/**\n * @param {http} request actual http or https request function\n * @param {RequestOptions} requestOptions\n * @param {object} config Config object.\n * @param {boolean} [config.justHeaders] only return headers as soon as available. false\n * @param {boolean} [config.binary] return binary\n * @param {boolean} [config.er] erotic callback\n */\nexport const makeRequest = (request, requestOptions, config) => {\n  const { justHeaders, binary, er = erotic(true) } = config\n  let req\n\n  /** @type {import('http').IncomingHttpHeaders} */\n  let h\n  /** @type {{statusMessage: string, statusCode: number}} */\n  let m\n  /** @type {string|Buffer} */\n  let b\n  /** @type {number} */\n  let rl = 0\n  /** @type {number} */\n  let bl = 0\n\n  const promise = new Promise((r, j) => {\n    req = request(requestOptions, async (res) => {\n      const { headers, statusMessage, statusCode } = res\n      h = headers\n      m = { statusMessage, statusCode }\n      if (justHeaders) {\n        res.destroy()\n        r()\n        return\n      }\n      const isGzip = isMessageGzip(res)\n\n      res.on('data', data => rl += data.byteLength )\n\n      const rs = isGzip\n        ? res.pipe(createGunzip())\n        : res\n\n\n      const { promise: p } = new Catchment({ rs, binary })\n      let body = await p\n\n      b = body\n      bl = body.length\n\n      r()\n    })\n      .on('error', (error) => {\n        const err = er(error)\n        j(err)\n      })\n  }).then(() => {\n    const r = {\n      body: b,\n      headers: h,\n      ...m,\n      rawLength: rl,\n      byteLength: bl,\n      parsedBody: null,\n    }\n    return r\n  })\n  return { req, promise }\n}"]}